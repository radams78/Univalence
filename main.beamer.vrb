We can now define the set of expressions over a grammar:

\begin{code}
  data Subexpression : Alphabet → ∀ C → Kind C → Set
  Expression : Alphabet → ExpressionKind → Set
  Body : Alphabet → ∀ {K} → Kind (-Constructor K) → Set

  Expression V K = Subexpression V -Expression (base K)
  Body V {K} C = Subexpression V (-Constructor K) C

  infixr 50 _,,_
  data Subexpression where
    var : ∀ {V} {K} → Var V K → Expression V (varKind K)
    app : ∀ {V} {K} {C} → Constructor C → Body V {K} C →
      Expression V K

    out : ∀ {V} {K} → Body V (out K)
    _,,_ : ∀ {V} {K} {A} {L} {C} → Expression (extend V A) L →
      Body V {K} C → Body V (Π A L C)
\end{code}
